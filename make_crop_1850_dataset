#!/usr/bin/env python

from __future__ import division

from netCDF4 import Dataset
import numpy

# Read in data
crop2000 = Dataset('mksrf_78pft_harvest_landuse_rc2000_c150203.nc')
crop2000_pctcft = crop2000.variables['PCT_PFT'][15:,:,:]
noncrop1850 = Dataset('mksrf_landuse_rc1850_c090630.nc')
noncrop1850_pctcft = noncrop1850.variables['PCT_PFT'][15:,:,:]

# Determine total crop cover in each grid cell in both datasets
crop2000_totcrop = numpy.sum(crop2000_pctcft, axis=0)
noncrop1850_totcrop = numpy.sum(noncrop1850_pctcft, axis=0)

# Determine which grid cells do and do not have information about break-down into CFTs
crop2000_gridcells_with_crop = (crop2000_totcrop > 0)
crop2000_gridcells_with_no_crop = numpy.logical_not(crop2000_gridcells_with_crop)

# For grid cells with crop: Determine year-1850 CFT percentages by scaling the
# year-2000 CFT percentages so that the year-1850 total matches the total from
# the non-crop dataset.
crop1850_pctcft = numpy.zeros(crop2000_pctcft.shape)
num_cfts = crop1850_pctcft.shape[0]
for cft in range(num_cfts):
    crop1850_pctcft[cft, crop2000_gridcells_with_crop] = \
      crop2000_pctcft[cft, crop2000_gridcells_with_crop] * \
      (noncrop1850_totcrop[crop2000_gridcells_with_crop] / \
       crop2000_totcrop[crop2000_gridcells_with_crop])

# Where year-2000 crop dataset had no crop, we had no information on crop
# breakdown, and divided by 0. Fix that by putting all crop in the generic crop
# types.
noncrop_num_cfts = noncrop1850_pctcft.shape[0]
for cft in range(noncrop_num_cfts):
    crop1850_pctcft[cft, crop2000_gridcells_with_no_crop] = \
      noncrop1850_pctcft[cft, crop2000_gridcells_with_no_crop]

for cft in range(noncrop_num_cfts, num_cfts):
    crop1850_pctcft[cft, crop2000_gridcells_with_no_crop] = 0


# Check: shouldn't have any nan values
if (numpy.any(numpy.isnan(crop1850_pctcft))):    
    raise ValueError('NaNs remain in crop1850_pctcft')

# Make final 1850 dataset
crop1850 = crop2000
crop1850_pctpft = crop1850.variables['PCT_PFT'][:]
crop1850_pctpft[15:,:,:] = crop1850_pctcft
### crop1850.variables['PCT_PFT'][15:,:,:] = crop1850_pctcft

# Check: crop1850 natveg should match noncrop1850 natveg

# Check: crop1850 should sum to 100% everywhere
      
# Check: crop1850 totcrop should match noncrop1850 totcrop

# Check: For grid cells where there is crop in 1850 and crop in 2000, CFT
# fractions in 1850 should match CFT fractions in 2000

# (Optional) Check: For grid cells where there is crop in 1850 but no crop in
# 2000, CFT fractions in 1850 should match non-crop CFT fractions in 1850
