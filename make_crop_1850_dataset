#!/usr/bin/env python

# This script creates a year-1850 raw PFT dataset with breakdown into prognostic
# crop types.
#
# It does this by using the relative CFT breakdown from the year-2000 crop raw
# dataset, and the total crop cover from the year-1850 non-crop raw dataset. For
# grid cells with no crops in year 2000, crop cover is all assigned to the
# generic crop.

from __future__ import division
from __future__ import print_function

import sys

if sys.hexversion < 0x02070000:
    print(70 * "*")
    print("ERROR: {0} requires python >= 2.7.x. ".format(sys.argv[0]))
    print("It appears that you are running python {0}".format(
        ".".join(str(x) for x in sys.version_info[0:3])))
    print(70 * "*")
    sys.exit(1)

#
# built-in modules
#
import traceback
import numpy
import subprocess
import argparse

#
# installed dependencies
#
from netCDF4 import Dataset

# ------------------------------------------------------------------------
# classes
# ------------------------------------------------------------------------

class PctPft:
    """Holds information on pct_pft, for all PFTs, for one file.

    Public data members are:
    - pct_pft_data
    """

    # Index of first CFT in the PFT array
    _FIRSTCROP = 15

    def __init__(self, pct_pft_data):
        """Creates a pct_pft object, given a 3-d PCT_PFT numpy array.

        pct_pft_data is ordered (pft_type, i, j)."""

        self.pct_pft_data = pct_pft_data

    @classmethod
    def pct_pft_from_file(cls, filename):
        """Creates a pct_pft object by reading the PCT_PFT variable from a
        netcdf file."""

        netcdf_data = Dataset(filename)
        pct_pft_data = netcdf_data.variables['PCT_PFT'][:]
        return cls(pct_pft_data)

    @classmethod
    def pct_pft_crop1850_from_crop2000_and_noncrop1850(cls, crop2000, noncrop1850):
        """Creates a year-1850 pct_pft object with breakdown into crops, given a
        year-2000 pct_pft object with breakdown into crops (crop2000)
        and a year-1850 pct_pft object without crops (noncrop1850).
        """

        crop1850 = numpy.empty(crop2000.pct_pft_data.shape)
        crop1850[:] = numpy.NAN
        
        # Natural PFTs come from non-crop 1850
        crop1850[:cls._FIRSTCROP,:,:] = noncrop1850.pct_pft_data[:cls._FIRSTCROP,:,:]

        # For grid cells with crop: Determine year-1850 CFT percentages by scaling the
        # year-2000 CFT percentages so that the year-1850 total matches the total from
        # the non-crop dataset.
        for cft in range(cls._FIRSTCROP, crop2000.num_pfts()):
            crop1850[cft, crop2000.gridcells_with_crop()] = \
                crop2000.pct_pft_data[cft, crop2000.gridcells_with_crop()] * \
                (noncrop1850.total_crop()[crop2000.gridcells_with_crop()] / \
                crop2000.total_crop()[crop2000.gridcells_with_crop()])

        # Where year-2000 crop dataset had no crop, we had no information on crop
        # breakdown, and divided by 0. Fix that by putting all crop in the generic crop
        # types.
        for cft in range(cls._FIRSTCROP, noncrop1850.num_pfts()):
            crop1850[cft, crop2000.gridcells_with_no_crop()] = \
              noncrop1850.pct_pft_data[cft, crop2000.gridcells_with_no_crop()]

        for cft in range(noncrop1850.num_pfts(), crop2000.num_pfts()):
            crop1850[cft, crop2000.gridcells_with_no_crop()] = 0

        # Check: shouldn't have any nan values
        if (numpy.any(numpy.isnan(crop1850))):    
            raise ValueError('NaNs remain in crop1850')

        return cls(crop1850)


    def num_pfts(self):
        """Returns number of PFTs"""

        return self.pct_pft_data.shape[0]
        
    def gridcells_with_crop(self):
        """Returns an array of boolean values for each grid cell: whether there
        is any crop in that grid cell."""

        return (self.total_crop() > 0)

    def gridcells_with_no_crop(self):
        """Returns an array of boolean values for each grid cell: true if there
        is no crop in that grid cell."""

        return numpy.logical_not(self.gridcells_with_crop())

    def pct_nat_pft(self):
        """Returns an array of the natural PFT percentages on the grid cell."""

        return self.pct_pft_data[:self._FIRSTCROP,:,:]

    def pct_cft(self):
        """Returns an array of the CFT percentages on the grid cell."""

        return self.pct_pft_data[self._FIRSTCROP:,:,:]

    def cft_fractions(self, mask):
        """Returns an array of CFT fractions, as a fraction of total crop area.

        Only processes gridcells within the given mask; the mask should exclude
        all points with 0 crop area, and may exclude other points as well.
        """

        return self.pct_cft()[:,mask] / self.total_crop()[mask]
        
    def total_cover(self):
        """Returns sum of pct_pft for each grid cell."""

        return numpy.sum(self.pct_pft_data, axis=0)
    
    def total_crop(self):
        """Returns an array containing the total crop fraction for each grid cell."""

        pct_cft = self.pct_pft_data[self._FIRSTCROP:,:,:]
        return numpy.sum(pct_cft, axis=0)

        
# ------------------------------------------------------------------------
# user input
# ------------------------------------------------------------------------

def commandline_options():
    """Process the command line arguments."""

    parser = argparse.ArgumentParser(
        description = "Creates a year-1850 raw PFT dataset with breakdown into prognostic crop types.")

    parser.add_argument('--crop2000', required=True, dest="crop2000_file",
                        help="Path to existing year-2000 crop raw dataset (input)")

    parser.add_argument('--noncrop1850', required=True, dest="noncrop1850_file",
                        help="Path to existing year-1850 non-crop raw dataset (input)")

    parser.add_argument('--crop1850', required=True, dest="crop1850_file",
                        help="Path to new year-1850 crop raw dataset (output)")

    parser.add_argument('--backtrace', action='store_true',
                        help='show exception backtraces as extra debugging output')

    options = parser.parse_args()
    return options

# ------------------------------------------------------------------------
# work functions
# ------------------------------------------------------------------------

def create_1850_dataset(crop1850_pctpft, noncrop1850_filename, crop1850_filename):
    """Create the year-1850 crop raw dataset.

    crop1850_pctpft: PctPft object containing data for crop 1850
    noncrop1850_filename: string giving file name for non-crop 1850 file
    crop1850_filename: string giving file name for output file
    """

    # A bit of a kludge to get a starting file without PCT_PFT (because I can't
    # see a way to change a dimension size in an existing Dataset)
    subprocess.check_call(['ncks', '-x', '-v', 'PCT_PFT', noncrop1850_filename, crop1850_filename])
    crop1850 = Dataset(crop1850_filename, "a")

    crop1850.createDimension('pft', crop1850_pctpft.num_pfts())
            
    pct_pft = crop1850.createVariable(
        'PCT_PFT', 'f4', ('pft', 'lat', 'lon'), fill_value=-999)
    pct_pft.setncattr('long_name', 'percent pft')
    pct_pft[:] = crop1850_pctpft.pct_pft_data
    
    crop1850.close()


# -------------------------------------------------------------------------------
#
# main
#
# -------------------------------------------------------------------------------

def main(options):


    # ------------------------------------------------------------------------
    # Set parameters
    # ------------------------------------------------------------------------

    # Tolerance for error checks
    # pretty loose tolerance since data in files are single precision
    tol = 1e-4

    # ------------------------------------------------------------------------
    # Determine PCT_CFT for 1850
    # ------------------------------------------------------------------------

    # Read in data
    crop2000 = PctPft.pct_pft_from_file(options.crop2000_file)
    noncrop1850 = PctPft.pct_pft_from_file(options.noncrop1850_file)

    # Make 1850 pctpft
    crop1850 = PctPft.pct_pft_crop1850_from_crop2000_and_noncrop1850(crop2000, noncrop1850)

    # ------------------------------------------------------------------------
    # Do some sanity checks
    # ------------------------------------------------------------------------

    if (numpy.any(crop1850.pct_nat_pft() != noncrop1850.pct_nat_pft())):
        raise RuntimeError('crop 1850 natveg distribution should match noncrop 1850 natveg distribution')

    if (numpy.any(
        numpy.logical_and(
            (crop1850.total_cover() > 0),
            (abs(crop1850.total_cover() - 100) > tol)))):
        raise RuntimeError('total of PCT_PFT should be 100% for all grid cells')

    if (numpy.any(abs(crop1850.total_crop() - noncrop1850.total_crop()) > tol)):
        raise RuntimeError('total crop in 1850 should match total from non-crop 1850 dataset')

    gridcells_with_crop_in_1850_and_2000 = numpy.logical_and(
        crop1850.gridcells_with_crop(), crop2000.gridcells_with_crop())
    cft_fractions_1850 = crop1850.cft_fractions(gridcells_with_crop_in_1850_and_2000)
    cft_fractions_2000 = crop2000.cft_fractions(gridcells_with_crop_in_1850_and_2000)
    if (numpy.any(abs(cft_fractions_1850 - cft_fractions_2000) > tol)):
        raise RuntimeError('For grid cells where there is crop in 1850 and crop in 2000, '
                           'CFT fractions in 1850 should match CFT fractions in 2000.')

    gridcells_with_crop_in_1850_but_not_2000 = numpy.logical_and(
        crop1850.gridcells_with_crop(), crop2000.gridcells_with_no_crop())
    cft_fractions_1850 = crop1850.cft_fractions(gridcells_with_crop_in_1850_but_not_2000)
    cft_fractions_noncrop1850 = noncrop1850.cft_fractions(gridcells_with_crop_in_1850_but_not_2000)
    noncrop_num_cfts = cft_fractions_noncrop1850.shape[0]
    if (numpy.any(abs(cft_fractions_1850[:noncrop_num_cfts,...] - cft_fractions_noncrop1850) > tol)):
        raise RuntimeError('For grid cells where there is crop in 1850 but no crop in 2000, '
                           'CFT in 1850 should match non-crop CFT in 1850')

    if (numpy.any(
        crop1850.pct_cft()[noncrop_num_cfts:, gridcells_with_crop_in_1850_but_not_2000] > 0)):
        raise RuntimeError('For grid cells where there is crop in 1850 but no crop in 2000, '
                           'CFT should be 0 for non-generic CFTs')

    # ------------------------------------------------------------------------
    # Create output file
    # ------------------------------------------------------------------------

    create_1850_dataset(crop1850, options.noncrop1850_file, options.crop1850_file)

    return 0
    
if __name__ == "__main__":
    options = commandline_options()
    try:
        status = main(options)
        sys.exit(status)
    except Exception as error:
        print(str(error))
        if options.backtrace:
            traceback.print_exc()
        sys.exit(1)

